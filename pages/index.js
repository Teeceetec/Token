import React, { useEffect, useState } from "react";
import Head from "next/head";
import { ERC_CONTRACT_ADDRESS, ERC_CONTRACT_ABI } from ".../constants/constant";

import styles from "../styles/Home.module.css";
//import Web3Modal from "web3modal";
import { Contract, utils, ethers} from "ethers";

export default function Home() {
  const [walletConnected, setWalletConnected] = useState(false);
  const [loading, setLoading] = useState(false);
  const [totalAmount, setTotalAmount] = useState(0);
  const [recipientAddress, setRecipientAddress] = useState("");
  const [recipientAmount, setRecipientAmount] = useState(0);
  const [recipientBalance, setRecipientBalance] = useState("");
  const [provider, setProvider] = useState(null);
  const [netWork, setNetWork] = useState(null);

  //const web3ModalRef = useRef(null);

  const recipientAddressChange = (e) => {
    setRecipientAddress(e.target.value);
  };

  const recipientAmountChange = (e) => {
    setRecipientAmount(e.target.value);
  };

  const recipieentBalanceChange = (e) => {
    setRecipientBalance(e.target.value);
  };

  const transferTokens = async () => {
    if (recipientAddress === "" || recipientAmount > 0) {
      alert("Please enter a recipient address and amount");
      return;
    }

    try {
      const { ethereum } = window;
      if (ethereum) {
        const provider = new ethers.providers.Web3Provider(ethereum);
        const contract = new Contract(
          ERC_CONTRACT_ADDRESS,
          ERC_CONTRACT_ABI,
          provider.getSigner(),
        );

        const tx = await contract.transfer(
          recipientAddress,
          utils.parseEther(recipientAmount),
        );
        setLoading(true);
        await tx.wait();
        console.log("Transfer successful");
        window.alert("Transfer successful!!");
        setLoading(false);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const getBalance = async () => {
    if (recipientBalance === "" || !recipientAddress) {
      window.alert("Please enter a recipient address");
    }

    try {
      const { ethereum } = window;

      if (ethereum) {
        const provider = new  ethers.providers.Web3Provider(ethereum);
        const contract = new Contract(
          ERC_CONTRACT_ADDRESS,
          ERC_CONTRACT_ABI,
          provider,
        );

        const balance = await contract.balanceOf(recipientAddress);
        setRecipientBalance(utils.formatEther(balance));
      }
    } catch (err) {
      console.log(err);
    }
  };

  const getTotalSupply = async () => {
    try {
      const { ethereum } = window;
      if (ethereum) {
       throw new Error("Not implemented");
      }
      const provider = new ethers.providers.Web3Provider(ethereum);
      const contract = new Contract(
        ERC_CONTRACT_ADDRESS,
        ERC_CONTRACT_ABI,
        provider,
      );

      const total = await contract.totalSupply();
      setTotalAmount(utils.formatEther(total));
    } catch (err) {
      console.log(err);
    }
  };

  const connectWallet = async () => {
    try {
      if (window.ethereum) {
        await window.ethereum.request({ method: "eth_requestAccounts" });
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        setProvider(provider);
      }
    } catch (err) {
      console.error(err);
    }
    setWalletConnected(true);
  };

  useEffect(() => {
    const initializeProvider = async () => {
      if (window.ethereum) {
        await window.ethereum.request({ method: "eth_requestAccounts" });
      }
    };
    initializeProvider();
  }, []);

  useEffect(() => {
    const getNetwork = async () => {
      if (provider) {
        const network = await provider.getNetwork();
        setNetWork(network.chainId);
      }
    };
    getNetwork();
  }, [walletConnected]);

  const renderButton = () => {
    if (!walletConnected) {
      return (
        <button className={styles.button} onClick={connectWallet}>
          Connect Wallet
        </button>
      );
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>ERC20</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>ERC20 TOKEN</h1>
        <div>
          <h3>TOTAL_SUPPLY : {totalAmount}</h3>
           <button onClick={getTotalSupply}>getsupply</button>
          <label>
            Recipient Address:
            <input
              type="text"
              value={recipientAddress}
              onChange={recipientAddressChange}
            />
          </label>
          <label>
            Amount:
            <input
              type="text"
              value={recipientAmount}
              onChange={recipientAmountChange}
            />
          </label>

          <button onClick={transferTokens}>Transfer</button>
        </div>
        <div>
          <label>
            Recipient Balance:
            <input
              type="text"
              value={recipientBalance}
              onChange={recipieentBalanceChange}
            />
          </label>
          <button onClick={getBalance}>Get Balance</button>
        </div>

        <div>
          <h3>AddressBalance: {recipientBalance}</h3>
        </div>

        <p>Connect your wallet by clicking this button</p>
        <p> Network connected: {netWork}</p>
        {renderButton()}
      </main>
    </div>
  );
}